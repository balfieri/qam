#!/usr/bin/perl -w
#
# out2sp - convert qam.out file to ngspice or hspice simulation; also models a 10mm organic package
#          stripline as the channel
#
use strict;
use warnings;

my $line_len    = shift @ARGV || "10m";         # 10mm (not 10 meters)
$line_len !~ /m$/ and $line_len .= "m";
my $out_base    = shift @ARGV || "qam";
my $spice       = shift @ARGV || "ngspice";
my $sp_base     = shift @ARGV || $out_base . ".${line_len}";

my $use_ngspice = int( $spice =~ /ngspice/ );

my $I_s  = "VI   I_clk 0 DC 0.0 PWL ( 0p, 0m";
my $Q_s  = "VQ   Q_clk 0 DC 0.0 PWL ( 0p, 0m";
my $IQ_s = "VIQ IQ_clk 0 DC 0.0 PWL ( 0p, 0m";

open( Q, "${out_base}.out" ) or die "ERROR: could not open ${out_base}.out for input\n";
my $ts = 0.0;
my $time = 0.0;
my $Vmax = 0.0;
while( <Q> )
{
    if ( /TIMESTEP_PS=(\S+)/ ) {
        $ts = $1;
    } elsif ( /(\S+) \+ (\S+) \= (\S+)/ ) {
        my $I  = $1;
        my $Q  = $2;
        my $IQ = $3;
        $I > $Vmax and $Vmax = $I;
        $I *= 2.0;
        $Q *= 2.0;
        $IQ *= 2.0;
        $time += $ts;
        $I_s  .= "\n+ , ${time}p, " . sprintf( "%6.4fm", $I );
        $Q_s  .= "\n+ , ${time}p, " . sprintf( "%6.4fm", $Q );
        $IQ_s .= "\n+ , ${time}p, " . sprintf( "%6.4fm", $IQ );
    }
}
close( Q );

$I_s  .= " )";
$Q_s  .= " )";
$IQ_s .= " )";

my $end_time = int( $time + 0.5 );

print "Creating ${sp_base}.sp and running ${spice} on it...\n";
open( S, ">${sp_base}.sp" ) or die "ERROR: unable to open ${sp_base}.sp for output\n";
print S <<EOF;
* ${sp_base}.sp
.param Vmax = ${Vmax}m
.param GND  = 0m
.param Vmin = -${Vmax}m
.param Z0   = 44

$I_s
$Q_s
$IQ_s

* LC-dominated lossy transmission line ($line_len) with Z0 
Rw0rt IQ_clk    IQ_clk_tx      R='Z0'   \$ Tx drive resistance
Cw0t  IQ_clk_tx GND  0.5p               \$ Tx terminating capacitance
EOF
if ( $use_ngspice ) {
    print S <<EOF;
.model line ltra len='$line_len' rel=1  \$ transmission line proper (one wire)
+ l   = 2.625091e-07 
+ c   = 1.391871e-10 
+ r   = 5.361470e+01 
+ g   = 0.0000000+00
ow0   IQ_clk_tx GND  IQ_clk_rx GND line 
EOF
} else {
    print S <<EOF;
.model hdi_model W MODELTYPE=RLGC, N=1  \$ transmission line proper (one wire)
+ Lo = 2.625091e-07
+ Co = 1.391871e-10
+ Ro = 5.361470e+01
+ Go = 0.000000e+00
+ Rs = 5.292260e-03
W1    IQ_clk_tx GND  IQ_clk_rx GND  RLGCmodel=hdi_model N=1 L=5mm
EOF
}
print S <<EOF;
Cw0r  IQ_clk_rx GND  0.5p               \$ Rx terminating capacitance
Rw0r  IQ_clk_rx GND            R='Z0'   \$ Rx terminating resistance 

.OP
.tran 1p ${end_time}p
.save v(I_clk) v(Q_clk) v(IQ_clk) v(IQ_clk_rx)
EOF
if ( $use_ngspice ) {
    print S <<EOF;
.control
run
hardcopy ${sp_base}.iqiq.eps v(I_clk) v(Q_clk) v(IQ_clk)
hardcopy ${sp_base}.inq.eps v(I_clk) v(Q_clk)
hardcopy ${sp_base}.i.eps v(I_clk) 
hardcopy ${sp_base}.q.eps v(Q_clk) 
hardcopy ${sp_base}.iqt.eps v(IQ_clk_tx) 
hardcopy ${sp_base}.iqr.eps v(IQ_clk_rx)
hardcopy ${sp_base}.iqiq.eps v(IQ_clk) v(IQ_clk_rx)
.endc
EOF
} else {
    print S <<EOF;
.option post=2 probe runlvl=5 accurate 
EOF
}
close( S );

my $cmd;
if ( $use_ngspice ) {
    $cmd = "export SPICE_ASCIIRAWFILE=1; ${spice} -b ${sp_base}.sp -r ${sp_base}.raw >& ${sp_base}.out";
} else {
    $cmd = "${spice} -b ${sp_base}.sp                   >& ${sp_base}.out";
}
print "${cmd}\n";
system( $cmd );
